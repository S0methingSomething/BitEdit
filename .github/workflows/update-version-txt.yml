# .github/workflows/update-version-txt.yml

name: Update BitEdit_version.txt

on:
  push:
    branches:
      - main # Or your repository's default branch (e.g., master)
    paths:
      - 'index.html' # Only run this workflow if index.html has changed

jobs:
  update_version_file:
    runs-on: ubuntu-latest
    # Grant permissions for the GITHUB_TOKEN to push to the repository
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # No explicit token needed here for checkout, uses default GITHUB_TOKEN
        # For pushing, the job-level permission is key.

      - name: Extract version from index.html
        id: get_version
        run: |
          # This command looks for the line after "GITHUB_ACTION_MARKER_APP_VERSION",
          # then extracts the version string (e.g., "v1.4.3" or "1.4.3.0")
          # from the 'const CURRENT_APP_VERSION = "...";' line.
          VERSION_LINE=$(grep 'GITHUB_ACTION_MARKER_APP_VERSION' -A 1 index.html | tail -n1)
          
          # Regex to capture version like "v1.2.3" or "1.2.3" or "1.2.3.4"
          # It expects the version to be enclosed in double quotes.
          VERSION_STRING=$(echo "$VERSION_LINE" | sed -n 's/.*CURRENT_APP_VERSION = "\(v\?[0-9]\+\.[0-9]\+\.[0-9]\+\(\.[0-9]\+\)?\)".*/\1/p')
          
          if [ -z "$VERSION_STRING" ]; then
            echo "Error: Version string not found or invalid format in index.html."
            echo "Expected format: const CURRENT_APP_VERSION = \"[v]x.x.x[.x]\";"
            echo "Found line: $VERSION_LINE"
            exit 1
          fi
          echo "Extracted version: $VERSION_STRING"
          echo "version=$VERSION_STRING" >> "$GITHUB_OUTPUT"

      - name: Create/Update BitEdit_version.txt
        run: |
          VERSION_TO_WRITE="${{ steps.get_version.outputs.version }}"
          # The target file path within the repository
          VERSION_FILE_PATH="BitEdit/BitEdit_version.txt" 
          
          # Ensure the target directory exists
          mkdir -p "$(dirname "$VERSION_FILE_PATH")"
          
          echo "Writing version '$VERSION_TO_WRITE' to '$VERSION_FILE_PATH'"
          # Write only the version string to the file, overwriting if it exists
          echo "$VERSION_TO_WRITE" > "$VERSION_FILE_PATH"

      - name: Commit and push if changes were made
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Check if the target file was actually changed or created
          # git status --porcelain will output ' M BitEdit/BitEdit_version.txt' or '?? BitEdit/BitEdit_version.txt' if changed/new
          if [[ -n $(git status --porcelain BitEdit/BitEdit_version.txt) ]]; then
            echo "Changes detected in BitEdit/BitEdit_version.txt. Committing..."
            git add BitEdit/BitEdit_version.txt
            git commit -m "docs: Update BitEdit_version.txt to ${{ steps.get_version.outputs.version }}

            [skip ci]" # Adding [skip ci] to prevent potential CI loops
            git push
            echo "BitEdit_version.txt updated and pushed."
          else
            echo "BitEdit_version.txt is already up to date. No changes to commit."
          fi
