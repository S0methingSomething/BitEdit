name: Build Tailwind, Deploy BitEdit, and Update Version Files

on:
  push:
    branches: ["main"]
    paths:
      - 'BitEdit/index.html'         # For version extraction
      - 'BitEdit/tailwind/input.css' # Path to your main Tailwind input CSS
      - 'tailwind.config.js'       # Assumed to be at the root
      - 'postcss.config.js'        # Assumed to be at the root
      - 'BitEdit/**/*.js'          # If other JS files influence Tailwind classes
  workflow_dispatch:

permissions:
  contents: write   # To push updated version files
  pages: write      # To deploy to GitHub Pages
  id-token: write   # For OIDC token for GitHub Pages deployment

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build_deploy_and_commit_version:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' 
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: List node_modules/.bin (for debugging)
        run: ls -la node_modules/.bin || echo "node_modules/.bin not found or empty after npm ci"

      - name: Verify @tailwindcss/cli version (for debugging)
        run: npx --no -- @tailwindcss/cli --help || echo "@tailwindcss/cli not found or --help failed"

      - name: Build Tailwind CSS
        run: npx --no -- @tailwindcss/cli -i ./BitEdit/tailwind/input.css -o ./BitEdit/output.css --minify
        # Input: ./BitEdit/tailwind/input.css
        # Output: ./BitEdit/output.css
        # Config files (tailwind.config.js, postcss.config.js) are expected at the repo root.

      - name: Extract version from BitEdit/index.html
        id: get_version
        run: |
          INDEX_FILE_PATH="BitEdit/index.html"
          if [ ! -f "$INDEX_FILE_PATH" ]; then
            echo "Error: $INDEX_FILE_PATH not found."
            exit 1
          fi
          VERSION_LINE=$(grep 'GITHUB_ACTION_MARKER_APP_VERSION' -A 1 "$INDEX_FILE_PATH" | tail -n1)
          VERSION_STRING=$(echo "$VERSION_LINE" | sed -n 's/.*CURRENT_APP_VERSION[[:space:]]*=[[:space:]]*"\([^"]*\)".*/\1/p')
          
          if [ -z "$VERSION_STRING" ]; then
            echo "Error: Version string not found or invalid format in $INDEX_FILE_PATH."
            echo "Searched for pattern: const CURRENT_APP_VERSION = \"...version...\""
            echo "Line processed by sed: $VERSION_LINE"
            exit 1
          fi
          echo "Extracted version (original): $VERSION_STRING"
          echo "version_original=$VERSION_STRING" >> "$GITHUB_OUTPUT"

      - name: Normalize version string for CACHE_NAME
        id: normalize_version
        run: |
          RAW_VERSION="${{ steps.get_version.outputs.version_original }}"
          NORMALIZED_VERSION=$(echo "$RAW_VERSION" | sed 's/^v//') 
          echo "Normalized version for CACHE_NAME: $NORMALIZED_VERSION"
          echo "value=$NORMALIZED_VERSION" >> "$GITHUB_OUTPUT"

      - name: Create/Update BitEdit_version.txt locally
        id: update_version_txt
        run: |
          VERSION_TO_WRITE="${{ steps.get_version.outputs.version_original }}"
          VERSION_FILE_PATH="BitEdit/BitEdit_version.txt" 
          
          mkdir -p "$(dirname "$VERSION_FILE_PATH")"
          
          CURRENT_CONTENT=""
          if [ -f "$VERSION_FILE_PATH" ]; then
            CURRENT_CONTENT=$(cat "$VERSION_FILE_PATH")
          fi

          if [ "$CURRENT_CONTENT" != "$VERSION_TO_WRITE" ]; then
            echo "BitEdit_version.txt: Content changed. Writing '$VERSION_TO_WRITE'."
            echo "$VERSION_TO_WRITE" > "$VERSION_FILE_PATH"
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "BitEdit_version.txt is already up to date with '$VERSION_TO_WRITE'."
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Update CACHE_NAME in sw.js locally
        id: update_sw_js
        run: |
          NORMALIZED_VERSION="${{ steps.normalize_version.outputs.value }}"
          SW_FILE_PATH="BitEdit/sw.js"
          
          if [ ! -f "$SW_FILE_PATH" ]; then
            echo "Error: $SW_FILE_PATH not found."
            exit 1
          fi

          cp "$SW_FILE_PATH" "${SW_FILE_PATH}.orig"
          
          # This sed command finds the line after GITHUB_ACTION_MARKER_SW_CACHE_NAME
          # and replaces the content of '...' in "const CACHE_NAME = '...';"
          sed -E -i.bak "/\/\/ GITHUB_ACTION_MARKER_SW_CACHE_NAME/{n;s/(const CACHE_NAME = *')[^']*(' *;.*)/\1${NORMALIZED_VERSION}\2/;}" "$SW_FILE_PATH"
          
          if ! cmp -s "${SW_FILE_PATH}.bak" "$SW_FILE_PATH"; then
            echo "sw.js: CACHE_NAME updated to '${NORMALIZED_VERSION}'"
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "sw.js: CACHE_NAME already up to date or sed command did not modify the file."
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi
          rm -f "${SW_FILE_PATH}.bak" # Clean up backup file from sed -i

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Upload artifact for deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: './BitEdit' # This directory now includes locally modified/generated files

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Commit and push changed version files
        if: success() && (steps.update_version_txt.outputs.changed == 'true' || steps.update_sw_js.outputs.changed == 'true')
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          FILES_TO_COMMIT=""
          COMMIT_MESSAGE_DETAILS=""

          if [ "${{ steps.update_version_txt.outputs.changed }}" == "true" ]; then
            git add BitEdit/BitEdit_version.txt
            FILES_TO_COMMIT="BitEdit/BitEdit_version.txt"
            COMMIT_MESSAGE_DETAILS="BitEdit_version.txt"
          fi

          if [ "${{ steps.update_sw_js.outputs.changed }}" == "true" ]; then
            git add BitEdit/sw.js
            if [ -n "$FILES_TO_COMMIT" ]; then
              FILES_TO_COMMIT="$FILES_TO_COMMIT and BitEdit/sw.js"
              COMMIT_MESSAGE_DETAILS="$COMMIT_MESSAGE_DETAILS, sw.js CACHE_NAME"
            else
              FILES_TO_COMMIT="BitEdit/sw.js"
              COMMIT_MESSAGE_DETAILS="sw.js CACHE_NAME"
            fi
          fi
          
          echo "Committing changes to: $FILES_TO_COMMIT"
          git commit -m "docs: Update $COMMIT_MESSAGE_DETAILS to ${{ steps.get_version.outputs.version_original }} [skip ci]"
          git push
          echo "Version files updated and pushed to repository."
