name: Build Tailwind, Deploy BitEdit, and Update Files

on:
  push:
    branches: ["main"]
    paths:
      - 'BitEdit/index.html'         # For version extraction
      - 'BitEdit/tailwind/input.css' # Path to your main Tailwind input CSS
      - 'tailwind.config.js'         # Assumed to be at the root
      - 'postcss.config.js'          # Assumed to be at the root
      - 'BitEdit/**/*.js'            # If other JS files influence Tailwind classes
  workflow_dispatch:

permissions:
  contents: write   # To push updated version files and output.css
  pages: write      # To deploy to GitHub Pages
  id-token: write   # For OIDC token for GitHub Pages deployment

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build_deploy_and_commit:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' 
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Tailwind CSS
        run: npx @tailwindcss/cli -i ./BitEdit/tailwind/input.css -o ./BitEdit/output.css --minify

      - name: Extract version from BitEdit/index.html
        id: get_version
        run: |
          INDEX_FILE_PATH="BitEdit/index.html"
          if [ ! -f "$INDEX_FILE_PATH" ]; then
            echo "Error: $INDEX_FILE_PATH not found."
            exit 1
          fi
          VERSION_LINE=$(grep 'GITHUB_ACTION_MARKER_APP_VERSION' -A 1 "$INDEX_FILE_PATH" | tail -n1)
          VERSION_STRING=$(echo "$VERSION_LINE" | sed -n 's/.*CURRENT_APP_VERSION[[:space:]]*=[[:space:]]*"$$[^"]*$$".*/\1/p')
          
          if [ -z "$VERSION_STRING" ]; then
            echo "Error: Version string not found or invalid format in $INDEX_FILE_PATH."
            exit 1
          fi
          echo "version_original=$VERSION_STRING" >> "$GITHUB_OUTPUT"

      - name: Normalize version string for CACHE_NAME
        id: normalize_version
        run: |
          RAW_VERSION="${{ steps.get_version.outputs.version_original }}"
          NORMALIZED_VERSION=$(echo "$RAW_VERSION" | sed 's/^v//') 
          echo "value=$NORMALIZED_VERSION" >> "$GITHUB_OUTPUT"

      - name: Create/Update BitEdit_version.txt locally
        run: |
          echo "${{ steps.get_version.outputs.version_original }}" > BitEdit/BitEdit_version.txt

      - name: Update CACHE_NAME in sw.js locally
        run: |
          SW_FILE_PATH="BitEdit/sw.js"
          if [ ! -f "$SW_FILE_PATH" ]; then
            echo "Error: $SW_FILE_PATH not found."
            exit 1
          fi
          sed -i.bak -E "/\/\/ GITHUB_ACTION_MARKER_SW_CACHE_NAME/{n;s/(const CACHE_NAME = *')[^']*(' *;.*)/\1${{ steps.normalize_version.outputs.value }}\2/;}" "$SW_FILE_PATH"
          rm -f "${SW_FILE_PATH}.bak"

      # ---------- GitHub Pages deployment ----------
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Upload artifact for deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: './BitEdit'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # ---------- Cloudflare Pages deployment via Wrangler ----------
      # Uses repository variable CLOUDFLARE_PAGES_PROJECT and your Cloudflare secrets.
      - name: Create Cloudflare Pages project if missing
        uses: cloudflare/wrangler-action@v3
        continue-on-error: true
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: '4'
          command: pages project create ${{ vars.CLOUDFLARE_PAGES_PROJECT }} --production-branch main

      - name: Deploy BitEdit to Cloudflare Pages (production)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: '4'
          command: pages deploy BitEdit --project-name ${{ vars.CLOUDFLARE_PAGES_PROJECT }} --production --commit-dirty=true

      # ---------- Commit generated files back to repo ----------
      - name: Commit and push generated files
        if: success()
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Add all potentially generated or modified files to the staging area.
          # This includes the newly built CSS and any updated version files.
          git add BitEdit/output.css BitEdit/BitEdit_version.txt BitEdit/sw.js
          
          # Check for staged changes. If there are changes, commit and push.
          if ! git diff --staged --quiet; then
