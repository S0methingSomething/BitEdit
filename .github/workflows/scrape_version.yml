name: Get BitLife version

on:
  schedule:
    # Runs at 2 AM UTC every Sunday.
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allows manual runs

permissions:
  contents: write # Required to commit files

jobs:
  Get_Bitlife_latest_version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install -r BitEdit/Get_Bitlife_Version/requirements.txt

      - name: Scrape for current version
        id: scrape # ID to reference output in later steps
        run: echo "current_version=$(python BitEdit/Get_Bitlife_Version/Get_version.py)" >> $GITHUB_OUTPUT

      - name: Debug Print Scraped Version
        run: echo "Raw scraped version output by script is --->${{ steps.scrape.outputs.current_version }}<---"

      - name: Validate and Compare Versions
        id: validation # ID to reference output in later steps
        run: |
          scraped_version="${{ steps.scrape.outputs.current_version }}"
          version_file="BitEdit/Get_Bitlife_Version/version.txt"
          should_write_new_version="false" # Default: do not update file

          echo "Starting validation for scraped version: '$scraped_version'"

          if [ -z "$scraped_version" ]; then
            echo "Scraped version is blank. No update."
            echo "::set-output name=should_write::$should_write_new_version"
            exit 0 
          fi

          if ! echo "$scraped_version" | grep -q "[0-9]"; then
            echo "Scraped version '$scraped_version' does not contain numbers. No update."
            echo "::set-output name=should_write::$should_write_new_version"
            exit 0
          fi

          echo "Scraped version '$scraped_version' is valid."

          if [ ! -f "$version_file" ]; then
            echo "'$version_file' does not exist. Will create."
            should_write_new_version="true"
          else
            existing_version=$(cat "$version_file")
            echo "Existing version in '$version_file' is '$existing_version'."
            
            # Use dpkg for robust version string comparison
            if dpkg --compare-versions "$scraped_version" gt "$existing_version"; then
              echo "Scraped version '$scraped_version' is NEWER. Will update."
              should_write_new_version="true"
            else
              echo "Scraped version '$scraped_version' is NOT NEWER. No update."
            fi
          fi
          
          echo "::set-output name=should_write::$should_write_new_version"

      - name: Create or Update version.txt
        if: steps.validation.outputs.should_write == 'true'
        run: |
          echo "Writing version ${{ steps.scrape.outputs.current_version }} to BitEdit/Get_Bitlife_Version/version.txt"
          echo "${{ steps.scrape.outputs.current_version }}" > BitEdit/Get_Bitlife_Version/version.txt

      - name: Commit version.txt
        if: steps.validation.outputs.should_write == 'true' 
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update BitLife version to ${{ steps.scrape.outputs.current_version }}"
          file_pattern: 'BitEdit/Get_Bitlife_Version/version.txt'

